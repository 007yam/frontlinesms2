digraph {
	handle_disconnect[label="fconnectionService.handleDisconnect()"]
	smslib_disconnect[label="fconnectionService.handleDisconnection()"]
	smslib_endpoint[label="SmslibEndpoint"]
	smpp_endpoint[label="SmppEndpoint"]
	fmessage_storage[label="MessageStorageService.process()"]
	subgraph cluster_outgoing {
		label="Outgoing Messages"
		a[label="MessageSendService.send()"]
		c[label="seda:dispatches"]
		router[label="DispatchRouterService.slip()"]
		modem_out[label="seda:out-modem-${id}"]
		internet_out[label="seda:out-internet-${id}"]
		out_failuer[label="onFailureOnly"]
		out_failure_handler[label="dispatchRouterService.handleFailed()"]
		out_success[label="onSuccessOnly"]
		out_success_handler[label="dispatchRouterService.handleCompleted()"]
		subgraph cluster_smslib_out {
			label="SMSLib (outgoing)"
			modem_out
			smslib_translate[label="SmslibTranslationService.toCMessage()"]
			modem_out -> smslib_translate
			smslib_translate -> smslib_endpoint
		}
		subgraph cluster_nexmo_oauth_out {
			label="Nexmo OAuth (outgoing)"
			nexmo_oauth_pre[label="OauthNexmoPreProcessor.process()"]
			nexmo_oauth_post[label="OauthNexmoPostProcessor.process()"]
			nexmo_oauth_endpoint[label="OauthNexmoEndpoint"]
			error_handler[label="AuthenticationException\nInvalidApiIdException\nInsufficientCreditException"]
			internet_out -> nexmo_oauth_pre
			nexmo_oauth_pre -> nexmo_oauth_endpoint
			nexmo_oauth_endpoint -> nexmo_oauth_post
			error_handler -> handle_disconnect
		}
		a -> fmessage_storage
		fmessage_storage -> c
		c -> router
		router -> modem_out
		router -> internet_out
		out_failuer -> out_failure_handler
		out_success -> out_success_handler
	}
	subgraph cluster_incoming {
		label="Incoming Messages"
		in_store_queue[label="seda:incoming-fmessages-to-store"]
		in_process_queue[label="seda:incoming-fmessages-to-process"]
		in_router[label="IncomingMessageRouterService.route()"]
		subgraph cluster_smslib_in {
			label="SMSLib (incoming)"
			smslib_in[label="seda:raw-smslib"]
			smslib_in_exception[label="Exception"]
			smslib_in_translate[label="SmslibTranslationService.toFmessage()"]
			smslib_in_exception -> smslib_disconnect
			smslib_endpoint -> smslib_in
			smslib_in -> smslib_in_translate
			smslib_in_translate -> in_store_queue
		}
		subgraph cluster_smpp_in {
			label="SMPP (incoming)"
			smpp_in[label="seda:raw-smpp"]
			smpp_in_translate[label="SmppTranslationService.toFmessage()"]
			smpp_endpoint -> smpp_in
			smpp_in -> smpp_in_translate
			smpp_in_translate -> in_store_queue
		}
		in_store_queue -> fmessage_storage
		fmessage_storage -> in_process_queue
		in_process_queue -> in_router
	}
}

