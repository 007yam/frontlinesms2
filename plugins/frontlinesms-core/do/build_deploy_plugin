#!/bin/bash
set -e

# Extract flags
while [[ $1 == "--"* ]]; do
	if [ "$1" == "--m2-deploy" ]; then
		echo "# Maven deployment enabled."
		M2_DEPLOY=true
	fi
	shift
done

echo "# extract app name from application.properties..."
PLUGIN_NAME=`ls *GrailsPlugin.groovy | cut -d. -f1 | sed -E -e 's/^(.*)GrailsPlugin$/\1/' | sed -E 's/(([^^])([A-Z]))/\2-\3/g' | tr [:upper:] [:lower:]`
echo "# Extracted plugin name as $PLUGIN_NAME"

echo "# extract version from application.properties..."
PLUGIN_VERSION=$(env groovy -e "`grep -E '^\s*def\s+version' *GrailsPlugin.groovy`; println version")
echo "# Extracted plugin version as $PLUGIN_VERSION"
rm plugin.xml || echo "# no plugin.xml present"
grails --non-interactive clean
grails --non-interactive --stacktrace package-plugin
NEW_PLUGIN_ZIP_NAME=$PLUGIN_NAME-$PLUGIN_VERSION.zip
OLD_PLUGIN_ZIP_NAME=grails-$NEW_PLUGIN_ZIP_NAME
echo "# renaming $OLD_PLUGIN_ZIP_NAME to $NEW_PLUGIN_ZIP_NAME"
mv $OLD_PLUGIN_ZIP_NAME $NEW_PLUGIN_ZIP_NAME

IVY_CACHE_DIR=~/.grails/ivy-cache/org.grails.plugins/$PLUGIN_NAME/zips
mkdir -p $IVY_CACHE_DIR
IVY_CACHED_ZIP=$IVY_CACHE_DIR/$NEW_PLUGIN_ZIP_NAME
echo "# Removing old plugin from local ivy cache at $IVY_CACHED_ZIP..."
rm $IVY_CACHED_ZIP || echo "# Old plugin was not found in ivy cache."

echo "# Deploying to local ivy cache..."
cp $NEW_PLUGIN_ZIP_NAME $IVY_CACHED_ZIP

echo "# Plugin built and deployed to local ivy cache."

if [ -n "$M2_DEPLOY" ]; then
	echo "# deploy core plugin to remote plugin repo"
	echo "# TODO skip maven deploy for non-SNAPSHOT builds"
	echo "# Using maven password: $FRONTLINESMS_MAVEN_PASSWORD"
	ftp -nv dev.frontlinesms.com << EOF
hash
user m2repo $FRONTLINESMS_MAVEN_PASSWORD
mkdir org
mkdir org/grails/plugins
mkdir org/grails/plugins/$PLUGIN_NAME
cd org/grails/plugins/$PLUGIN_NAME
mkdir $PLUGIN_VERSION
cd $PLUGIN_VERSION
put $NEW_PLUGIN_ZIP_NAME
exit
EOF
	echo "# Plugin deployed to remote maven repo."
fi

