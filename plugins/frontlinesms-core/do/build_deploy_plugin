#!/bin/bash
set -e

# Extract flags
binaryFlag=""
buildBinary=false
while [[ $1 == "--"* ]]; do
	if [ "$1" == "--m2-deploy" ]; then
		echo "# Maven deployment enabled."
		m2deploy=true
	fi
	if [[ "$1" == "--binary" ]]; then
		echo "# Building plugin as binary."
		binaryFlag="--binary"
		buildBinary=true
	fi
	shift
done

echo "# Extracting grails version from application.properties..."
grailsVersion=$(grep 'app\.grails\.version=' application.properties | cut -d= -f2)
echo "# Grails version is $grailsVersion"

echo "# extract app name from application.properties..."
pluginName=`ls *GrailsPlugin.groovy | cut -d. -f1 | sed -E -e 's/^(.*)GrailsPlugin$/\1/' | sed -E 's/(([^^])([A-Z]))/\2-\3/g' | tr [:upper:] [:lower:]`
echo "# Extracted plugin name as $pluginName"

echo "# extract version from application.properties..."
if $buildBinary; then
	echo "# Changing plugin version to include binary and grails version in the name."
	sed -E -i -e "s/^\s*def\s+version\s*=\s*['\"](.*?)(-SNAPSHOT)?['\"]\s*$/\tdef version = \"\1-binary-$grailsVersion\2\"/g" *GrailsPlugin.groovy
fi
pluginVersion=$(env groovy -e "`grep -E '^\s*def\s+version' *GrailsPlugin.groovy`; println version")
echo "# Extracted plugin version as $pluginVersion"
rm plugin.xml || echo "# no plugin.xml present"
grails --non-interactive clean
grails --non-interactive --stacktrace $binaryFlag package-plugin

if $buildBinary; then
	oldPackageName=target/grails-plugin-$pluginName-$pluginVersion.jar
	newPackageName=$pluginName-$pluginVersion.jar
else
	newPackageName=$pluginName-$pluginVersion.zip
	oldPackageName=grails-$newPackageName
fi

echo "# renaming $oldPackageName to $newPackageName"
mv $oldPackageName $newPackageName

if $buildBinary; then
	echo "..."
else
	ivyCacheDir=~/.grails/ivy-cache/org.grails.plugins/$pluginName/zips
	mkdir -p $ivyCacheDir
	ivyCachedZip=$ivyCacheDir/$newPackageName
	echo "# Removing old plugin from local ivy cache at $ivyCachedZip..."
	rm $ivyCachedZip || echo "# Old plugin was not found in ivy cache."
	echo "# Deploying to local ivy cache..."
	cp $newPackageName $ivyCachedZip
	echo "# Plugin built and deployed to local ivy cache."

fi
mavenFileName="$newPackageName"

echo "# Deploying to local maven repository..."
mavenRepoDir=~/.m2/repository/org/grails/plugins/$pluginName/$pluginVersion/
echo "# Creating maven repo dir at $mavenRepoDir..."
mkdir -p $mavenRepoDir
echo "# Deploying to ${mavenRepoDir}$mavenFileName"
cp $mavenFileName $mavenRepoDir
echo "# Deployed to local maven repository."

if [ -n "$m2deploy" ]; then
	echo "# deploy core plugin to remote plugin repo"
	echo "# TODO skip maven deploy for non-SNAPSHOT builds"
	echo "# Using maven password: $FRONTLINESMS_MAVEN_PASSWORD"
	ftp -nv dev.frontlinesms.com << EOF
hash
user m2repo $FRONTLINESMS_MAVEN_PASSWORD
mkdir org
mkdir org/grails/plugins
mkdir org/grails/plugins/$pluginName
cd org/grails/plugins/$pluginName
mkdir $pluginVersion
cd $pluginVersion
put $mavenFileName
exit
EOF
	echo "# Plugin deployed to remote maven repo."
fi

