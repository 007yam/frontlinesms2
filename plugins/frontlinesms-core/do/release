#!/bin/bash

echo "### Building FrontlineSMS v2 release"

# Read Application.properties to find release version
APP_VERSION=`sed '/^\#/d' application.properties | grep 'app.version'  | tail -n 1 | cut -d "=" -f2-`
echo "# Read app version as $APP_VERSION"

# Exit if app version indicates it is an RC
echo "$APP_VERSION" | grep -qi "rc"
if [ $? -eq 0 ];
	then echo "# FAILURE: application version is an RC, must update version number before release" && exit 1
fi

# Ensure git repo is clean
echo "# Checking for clean repository..."
if test -n "$(git status --porcelain)"
then
	echo "# FAILURE: Your repository is not clean. This script can only build from a clean repo"
	exit 1
fi

# Assert that Kiswahili translation is complete
echo "# Checking for completeness of Kiswahili translation"
groovy do/i18n-compare.groovy grails-app/i18n/messages.properties grails-app/i18n/messages_sw.properties
RETVAL=$?
[ $RETVAL -ne 0 ] && echo "# FAILURE: Swahili translation is incomplete" && exit 1
echo "# Swahili i18n is complete"

# Roll version numbers to non-snapshot
echo "# Rolling version numbers to non-snapshot"
do/remove_snapshot_from_install_resource_directories

# Do builds
echo "# Building installers.."
grails prod BuildInstallers

# TODO: test build in appropriate format for machine
#### This can reuse elements of build_uninstall_install_test

# Commit
git add -A
git commit -m "Built $APP_VERSION using do/release script"
#### git push

# TODO: tag commit
#### git tag frontlinesms2.a.b
#### git push

# TODO: prompt user for new snapshot version number
#### prompt for new snapshot number

# TODO: roll version to new snapshot
#### similar to do/remove_snapshot_from_install_resource_directories

# TODO: commit with new snapshot version
#### git commit -m "Rolled version numbers to 2.x.y snapshot after 2.a.b release"

# TODO: git push --tags

# TODO: upload builds
#### CORE-1440

