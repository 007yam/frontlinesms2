#!/bin/bash
<<<<<<< HEAD
echo "Building new release"
echo "Checking for clean repository..."
=======
# FOR AUTOMATED BUILDING OF NEW RELEASES OF FRONTLINESMS
# Requirements: Groovy, Gradle. Currently only works on linux.

echo "### Building FrontlineSMS v2 release"
read -sn 1 -p "## WARNING ## This script will make modifications to your working directory, and commit these changes. It will also create a tag for the newly built version. Press any key to continue or Ctrl+C to quit..."
echo ""

# Read Application.properties to find release version
APP_VERSION=`sed '/^\#/d' application.properties | grep 'app.version'  | tail -n 1 | cut -d "=" -f2-`
echo "# Read current app version as ${APP_VERSION}"
APP_VERSION_SNAPSHOT_SUBSTRING=${APP_VERSION:(-9)}

# Check if app version is recognised
if [ "$APP_VERSION_SNAPSHOT_SUBSTRING" != "-SNAPSHOT" ];
	then echo "# FAILURE: application version ending with -SNAPSHOT expected" && exit 1
fi

# Drop -SNAPSHOT
APP_VERSION=${APP_VERSION%$APP_VERSION_SNAPSHOT_SUBSTRING}
echo "after dropping -SNAPSHOT, app version is now ${APP_VERSION}"

# Check if build is an RC
echo "$app_version" | grep -qi "rc"
RC_FLAG=$?

# Ensure git repo is clean
echo "# Checking for clean repository..."
>>>>>>> 290008c... resolved merged conflict of master into CORE-1104
if test -n "$(git status --porcelain)"
then
	echo "FAILURE: Your repository is not clean. This script can only build from a clean repo"
	exit 1
fi
# TODO: i18n

<<<<<<< HEAD
# TODO: roll version numbers to non-snapshot
echo "Rolling version numbers to non-snapshot"
=======
# Prompt for post-build version
echo "Please enter the name of the version as it should be after build (e.g. 2.4.3-SNAPSHOT)"
read POST_BUILD_VERSION

# Assert that Kiswahili translation is complete
echo "# Checking for completeness of Kiswahili translation"
groovy do/i18n-compare.groovy grails-app/i18n/messages.properties grails-app/i18n/messages_sw.properties
RETVAL=$?
[ $RETVAL -ne 0 ] && echo "# FAILURE: Swahili translation is incomplete" && exit 1
echo "# Swahili i18n is complete"

# Drop -SNAPSHOT from application.properties
sed -i "s/\(app\.version=\).*\$/\1${APP_VERSION}/" application.properties

# Run migration tests
pushd test/migration
gradle run
if [ $? -eq 0 ];
	then echo "# FAILURE: migration tests did not pass, ensure you have valid migration set up" && exit 1
fi
popd

# Roll version numbers to non-snapshot
echo "# Rolling version numbers to non-snapshot"
>>>>>>> 290008c... resolved merged conflict of master into CORE-1104
do/remove_snapshot_from_install_resource_directories

# TODO: do builds
echo "Building installers.."
grails prod BuildInstallers

# TODO: test build in appropriate format for machine
#### This can reuse elements of build_uninstall_install_test

# TODO: commit
#### git commit -m "Build for 2.a.b"
#### git push

# TODO: tag commit
#### git tag frontlinesms2.a.b
#### git push

# TODO: prompt user for new snapshot version number
#### prompt for new snapshot number

<<<<<<< HEAD
# TODO: roll version to new snapshot
#### similar to do/remove_snapshot_from_install_resource_directories

# TODO: commit with new snapshot version
#### git commit -m "Rolled version numbers to 2.x.y snapshot after 2.a.b release"
=======
# Commit
echo "Committing and tagging build"
git add -A
git commit -m "Built ${APP_VERSION} (committed using do/release script)"
git tag frontlinesms2.$APP_VERSION

# Roll application.properties to post-build version
sed -i "s/\(app\.version=\).*\$/\1${POST_BUILD_VERSION}/" application.properties
git add -A
git commit -m "2.${POST_BUILD_VERSION} ready for dev after 2.${APP_VERSION} release (committed using do/release script)"
>>>>>>> 290008c... resolved merged conflict of master into CORE-1104

# TODO: git push --tags

# TODO: upload builds
#### CORE-1440

